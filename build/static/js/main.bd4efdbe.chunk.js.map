{"version":3,"sources":["components/Person.js","components/FilterForm.js","components/NewPersonForm.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Person","props","person","name","number","onClick","deletePerson","FilterForm","value","filter","onChange","NewPersonForm","onSubmit","addPerson","newName","handlePersonChange","newNumber","handleNumberChange","type","baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Notification","message","className","style","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","notifyMessage","setNotifyMessage","notifyStyle","setNotifyStyle","useEffect","personService","initialPersons","event","target","preventDefault","length","window","confirm","find","changedPerson","map","catch","error","setTimeout","returnedPerson","concat","toLowerCase","includes","key","deletedPerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.bd4efdbe.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = (props) => (\n    <div>\n      {props.person.name} {props.person.number} <button onClick={props.deletePerson}>delete</button>\n    </div>\n)\n\nexport default Person","import React from 'react'\n\nconst FilterForm = (props) => (\n    <div>\n      filter shown with <input value={props.filter} onChange={props.onChange}/>\n    </div>\n)\n\nexport default FilterForm","import React from 'react'\n\nconst NewPersonForm = (props) => (\n    <form onSubmit={props.addPerson}>\n      <div>\n        name: <input value={props.newName} onChange={props.handlePersonChange}/>\n      </div>\n      <div>\n        number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n)\n\nexport default NewPersonForm","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request =  axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default {getAll, create, deletePerson, update}","import React from 'react'\n\nconst Notification = (props) => {\n    if (props.message === null) {\n        return null\n    }\n\n    return (\n        <div className={props.style}>\n            {props.message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Person from './components/Person'\nimport FilterForm from './components/FilterForm'\nimport NewPersonForm from './components/NewPersonForm'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notifyMessage, setNotifyMessage ] = useState(null)\n  const [ notifyStyle, setNotifyStyle ] = useState('')\n\n  useEffect(() => {\n    personService\n      .getAll()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n        })\n  }, [])\n\n  const alreadyAdded = (name) => {\n    if (persons.filter(person => person.name === name).length !== 0) {\n      return true\n    }\n    return false\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    if (alreadyAdded(newName)) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with  a new one?`)) {\n        const person = persons.find(person => person.name === newName)\n        const changedPerson = { ...person, number: newNumber}\n\n        personService\n          .update(changedPerson.id, changedPerson)\n          .then(response => {\n            setPersons(persons.map(person => person.id !== changedPerson.id ? person: changedPerson))\n            setNewNumber('')\n            setNewName('')\n            setNotifyStyle('notify')\n            setNotifyMessage(`Edited ${changedPerson.name}`)\n          })\n          .catch(error => {\n            setNotifyStyle('error')\n            setNotifyMessage(\n              `Information of ${changedPerson.name} has already been removed from server`\n            )\n            setTimeout(() => {\n              setNotifyMessage(null)\n            }, 3000)\n          })\n      }\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(personObject)\n          .then(returnedPerson => {\n            setPersons(persons.concat(returnedPerson))\n            setNewName('')\n            setNewNumber('')\n            setNotifyStyle('notify')\n            setNotifyMessage(`Added ${returnedPerson.name}`)\n          })\n    }\n    setTimeout(() => {\n      setNotifyMessage(null)\n    }, 3000)\n  }\n\n  const deletePerson = (id, name) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      personService\n        .deletePerson(id)\n        .then(deletedPerson => {\n          setPersons(persons.filter(person => person.id !== id))\n          setNotifyStyle('notify')\n          setNotifyMessage(`Deleted ${name}`)\n        })\n    }\n    setTimeout(() => {\n      setNotifyMessage(null)\n    }, 3000)\n  }\n\n  const handlePersonChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const listing = () => persons\n    .filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n    .map(person =>\n      <Person key={person.id} person={person} deletePerson={() => deletePerson(person.id, person.name)}/>)\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notifyMessage} style={notifyStyle} />\n      <FilterForm value={filter} onChange={handleFilterChange}/>\n      <h2>Add a new</h2>\n      <NewPersonForm \n      addPerson={addPerson} \n      newName={newName}\n      handlePersonChange={handlePersonChange}\n      newNumber={newNumber}\n      handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      {listing()}\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}